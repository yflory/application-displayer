<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc reference="Displayer.JS" locale="">
<web>Displayer</web>
<name>JS</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>Displayer.GetRenderedValue</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1453481584000</creationDate>
<date>1454924685000</date>
<contentUpdateDate>1453481584000</contentUpdateDate>
<version>344.1</version>
<title></title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>true</hidden>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators>|, </separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators>|, </separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage|onDemand|always</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>Displayer.JS</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>65a6ee1f-de88-4a5f-9c42-437bc932bd04</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>require.config({
    paths: { "xapp": "$!services.webjars.url('org.xwiki.contrib:api-structured-data-js', 'api-structured-data.js')" }
});

require(['xapp', 'jquery', 'xwiki-meta'], function(XApp, $, xm) {

  // Velocity code
  var AJAX_RENDERER_PATH = "$xwiki.getDocument('Displayer.GetRenderedValue').getURL()";
  // End Velocity code

  var CHECK_ICON = '&lt;div class="dynamic-displayer-check" title="Save the changes"&gt;&lt;span class="fa fa-check"&gt;&lt;/span&gt;&lt;/div&gt;';
  var CROSS_ICON = '&lt;div class="dynamic-displayer-cross" title="Close the editor"&gt;&lt;span class="fa fa-times"&gt;&lt;/span&gt;&lt;/div&gt;';
  var EDIT_ICON = '&lt;div class="dynamic-displayer-edit" title="Open the editor"&gt;&lt;span class="fa fa-pencil"&gt;&lt;/span&gt;&lt;/div&gt;';

  // Add the notification bar in the DOM
  if($('div[data-xwiki-property]').length) {
    $('&lt;div class="xnotification-container" id="dataDisplayerNotifications"&gt;&lt;/div&gt;').appendTo('body');
  }

  $('div[data-xwiki-property-edit]').find("textarea").attr('spellcheck', false);

  // Register the main event transforming the view displayer into an edit displayer
  var openEditor = function(e) {
    e.stopPropagation();
    // Close all other displayers in edit mode
    closeAllEditors();
    var viewDiv = $(this).parent().parent();
    // Get the property data from the displayer id
    var id = $(viewDiv).attr('data-xwiki-property');
    var options = getPropDataFromDiv(viewDiv);
    var docName = options.document;
    var className = options.obj;
    var objNumber = options.number;
    var propName = options.prop;
    // Display the edit field and hide the view one
    var editDiv = $('div[data-xwiki-property-edit="'+id+'"]');
    $(editDiv).css({"minHeight" : $(viewDiv).outerHeight()+"px"});
    $(editDiv).find("textarea").css({"minHeight" : $(viewDiv).outerHeight()-2+"px"});
    $(viewDiv).hide();
    $(editDiv).show();
    $(editDiv).find("input, select, textarea").focus();
    // Register the save action when the user presses Enter or Ctrl+Enter (for textareas)
    var map = [];
    $(editDiv).off('keydown keyup');
    $(editDiv).on('keydown keyup', function(e) {
      e = e || event; // to deal with IE
      map[e.keyCode] = e.type == 'keydown';
      if((map[13] &amp;&amp; map[17]) || (map[13] &amp;&amp; $(this).find("textarea").length == 0)) {
        map = [];
        saveField(viewDiv, editDiv, docName, className, objNumber, propName);
      }
    });
  }

  /**
   * Start the saving process
   * - Get the item
   * - Change and store its value
   * - Display the rendered content
   */
  var saveField = function(viewDiv, editDiv, docName, className, objNumber, propName) {
    // Get the application related to the object class in the API
    var app = XApp.getApp(className);
    // Get the value of the field, and for lists the label associated
    var inputElmt = $(editDiv).find("input, select, textarea");
    $(inputElmt).attr("readonly", "readonly");
    var valueInpt = $(inputElmt).val();
    var valueLabel = null;
    if($(inputElmt).is("select")) {
      valueLabel = $(inputElmt).find(":selected").text();
    }
    // Get the item from the API
    var itemId = docName+'|'+objNumber;
    app.getItem(itemId, callback_item(viewDiv, propName, valueInpt, valueLabel, app, itemId));
  }

  /**
   * Actions to execute once "app.getItem()" is completed :
   * - Change the value of the selected field
   * - Store the item with the API
   * - If we have a label, skip the rendering step and display the new value
   */
  var callback_item = function(div, propName, valueInpt, valueLabel, app, itemId) {
    return function(err, data) {
      if(err) {throw err;}
      data[propName] = valueInpt;
      // Display a dash when the new value is empty : an empty value would hide the viewdiv permanently!
      if(valueInpt == "") {
        $(div).attr('data-xwiki-property-empty', '1');
        valueInpt = '-';
      }
      else {
        $(div).attr('data-xwiki-property-empty', '0');
      }
      // Check if we have a label for the value (List, checkbox, radio, etc.)
      // If there is no label, the content must be rendered (velocity, wiki sytax, ...)
      var toRender = (valueLabel === null);
      var valueText = toRender ? valueInpt : valueLabel;
      if(!toRender || valueText === '') { // No rendering necessary
        callback_render(div, null, valueText);
        valueInpt = null;
      }
      app.storeItem(itemId, data, callback_save(div, valueInpt));
    }
  }
  /**
   * Actions to execute once the modifications are saved in the wiki :
   * - Display the notification at the bottom of the screen
   * - Get the rendered value of the field
   */
  var callback_save = function(div, valueInpt) {
    return function(err, data) {
      if(err) {throw err;}
      $('#dataDisplayerNotifications').html('&lt;div class="xnotification-wrapper"&gt;&lt;div class="xnotification xnotification-done"&gt;Saved&lt;/div&gt;&lt;/div&gt;').delay(1000).queue(function(n) {
        $(this).html('');
        n();
      });
      if(valueInpt) {
        getRenderedContent(valueInpt, div, callback_render);
      }
    }
  }
  var getRenderedContent = function(content, div, callback) {
    var options = getPropDataFromDiv(div);
    $.ajax({
      url : AJAX_RENDERER_PATH + "?xpage=plain",
      type : "POST",
      data : $.param(options)
    }).success(function(data) {
      callback(div, data);
    });
  }
  /**
   * Actions to execute once we've received the final value :
   * - Change the viewDiv content
   * - Display the viewDiv and hide the editDiv
   */
  var callback_render = function(div, htmlContent, textContent) {
    var id = $(div).attr('data-xwiki-property');
    if(textContent) {
      $(div).find("p").text(textContent);
    }
    else {
      $(div).html(htmlContent);
    }
    $(div).show();
    var editDiv = $('div[data-xwiki-property-edit="'+id+'"]');
    $(editDiv).find("input, select, textarea").removeAttr("readonly");
    $('div[data-xwiki-property-edit="'+id+'"]').hide();
  }

  /**
   * Get the id of a displayed div and return an object with all the sub-ids
   */
  var getPropDataFromDiv = function(div) {
    var id = $(div).attr('data-xwiki-property');
    var propData = decodeURI(id).replace('%26', '&amp;').split('_');
    var docName, className, objNumber, propName;
    if(propData.size() == 4) {
      docName = propData[0].replace('%5F', '_');
      className = propData[1].replace('%5F', '_');
      objNumber = propData[2].replace('%5F', '_');
      propName = propData[3].replace('%5F', '_');
    }
    return {
      "document" : docName,
      "obj" : className,
      "number" : objNumber,
      "prop" : propName
    }
  }

  /**
   * Close all edit displayers
   */
  var closeAllEditors = function() {
    $('div[data-xwiki-property]').show();
    $('div[data-xwiki-property-edit]').hide();
  }

  // Add the save and cancel icons
  var saveEditor = function(e) {
    var editDiv = $(this).parent().parent();
    var id = $(editDiv).attr('data-xwiki-property-edit');
    var viewDiv = $('div[data-xwiki-property="'+id+'"]');
    var options = getPropDataFromDiv(viewDiv);
    var docName = options.document;
    var className = options.obj;
    var objNumber = options.number;
    var propName = options.prop;
    saveField(viewDiv, editDiv, docName, className, objNumber, propName);
  }
  $('div[data-xwiki-property-edit]').each(function(idx, elmt) {
    $(elmt).append('&lt;div class="dynamic-displayer-rightPanelEdit"&gt;'+CHECK_ICON+CROSS_ICON+'&lt;/div&gt;');
    $(elmt).find(".dynamic-displayer-check").on('click', saveEditor);
    $(elmt).find(".dynamic-displayer-cross").on('click', closeAllEditors);
  });

  // Display the edit button
  $('div[data-xwiki-property]').hover(function() {
    if($(this).find(".dynamic-displayer-rightPanel").length == 0) {
      $(this).append('&lt;div class="dynamic-displayer-rightPanel"&gt;'+EDIT_ICON+'&lt;/div&gt;');
      $(this).find(".dynamic-displayer-edit").on('click', openEditor);
    }
    else {
      $(this).find(".dynamic-displayer-rightPanel").show();
    }
  }, function() {
    $(this).find(".dynamic-displayer-rightPanel").hide();
  });

  // Close the edit displayers when the user clicks elsewhere in the page
  $('html').click(closeAllEditors);
  $('div[data-xwiki-property-edit]').click(function(e){e.stopPropagation();});
});</code>
</property>
<property>
<name>EditDisplay</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>always</use>
</property>
</object>
<content></content></xwikidoc>
